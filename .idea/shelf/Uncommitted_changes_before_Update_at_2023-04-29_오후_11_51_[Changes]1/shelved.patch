Index: app/src/main/java/com/athena/projectgroupwareapp/main/tab2/chatting/ChattingActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.athena.projectgroupwareapp.main.tab2.chatting\r\n\r\nimport android.content.Context\r\nimport android.hardware.camera2.CaptureResult\r\nimport android.icu.number.IntegerWidth\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.WindowManager\r\nimport android.view.inputmethod.InputMethodManager\r\nimport android.widget.Adapter\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AlertDialog\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.view.get\r\nimport com.athena.projectgroupwareapp.databinding.ActivityChattingBinding\r\nimport com.athena.projectgroupwareapp.login.EmployeeAccount\r\nimport com.athena.projectgroupwareapp.login.G\r\nimport com.google.firebase.firestore.CollectionReference\r\nimport com.google.firebase.firestore.DocumentChange\r\nimport com.google.firebase.firestore.DocumentReference\r\nimport com.google.firebase.firestore.DocumentSnapshot\r\nimport com.google.firebase.firestore.EventListener\r\nimport com.google.firebase.firestore.FirebaseFirestore\r\nimport com.google.firebase.firestore.FirebaseFirestoreException\r\nimport com.google.firebase.firestore.QuerySnapshot\r\nimport java.text.SimpleDateFormat\r\nimport java.util.Calendar\r\nimport java.util.Date\r\nimport java.util.Objects\r\n\r\n\r\n//파이어베이스에 저장되는 document는 상대방이름이다.\r\n//말 건 사람은 필드에서 볼수있다.\r\nclass ChattingActivity : AppCompatActivity() {\r\n    lateinit var binding : ActivityChattingBinding\r\n    lateinit var firebase : FirebaseFirestore //파이어스토어 : 많이 쓸 예정이니까 미리 프로퍼티를 설정하자\r\n\r\n    lateinit var chatRef : CollectionReference //컬렉션 참조(→)하는 변수\r\n    lateinit var chatRef2 : DocumentReference //컬렉션 참조(→)하는 변수\r\n    //lateinit var chatRef3 : CollectionReference //컬렉션 참조(→)하는 변수\r\n\r\n    lateinit var otherChatRef3 : CollectionReference //컬렉션 참조(→)하는 변수\r\n    lateinit var otherChatRef4 : DocumentReference //컬렉션 참조(→)하는 변수\r\n    //lateinit var otherChatRef6 : CollectionReference //컬렉션 참조(→)하는 변수\r\n\r\n//    var otherId : String = GU.otherAccount?.id.toString()//상대방 사원번호와와\r\n//    var myId : String = G.employeeAccount?.id.toString()//내 사원번호를 더해서 collection을 만들자\r\n//    var collectionName : Int? = otherId.toInt()+myId.toInt()\r\n\r\n    var chattingRoom : String = GU.otherAccount?.name.toString() //대화방이름, 다른사람 이름이다.\r\n\r\n    //채팅방에 리사이클러뷰를 띄워보자\r\n    lateinit var msgadapter : MessageAdapter\r\n    var messageItems : MutableList<MessageItem> = mutableListOf()\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityChattingBinding.inflate(layoutInflater)\r\n\r\n        //캡쳐 불가하도록 만들자\r\n        getWindow().addFlags(WindowManager.LayoutParams.FLAG_SECURE)\r\n        setContentView(binding.root)\r\n\r\n        //채팅방 이름은 상대방 이름으로 표시하자\r\n        binding.toolbarChat.setTitle(chattingRoom)\r\n\r\n\r\n        //아답터 띄우기\r\n        msgadapter = MessageAdapter(this,messageItems)\r\n        binding.recyclerChatting.adapter = msgadapter\r\n\r\n        //Log.i(\"recycler\",msgadapter.toString())\r\n\r\n        //chatting이라는 컬렉션을 만들자 - 회원번호를 더한 값으로 만들자.\r\n        firebase = FirebaseFirestore.getInstance()\r\n        reference() //레퍼런스 참조변수\r\n\r\n        //기존데이터가져오기\r\n        getChattingData()\r\n\r\n        //내가 보낸 채팅 메세지를 저장한다.\r\n        binding.btn.setOnClickListener{view->clickSend()}\r\n\r\n    }//onCreate\r\n\r\n\r\n    fun reference(){\r\n        //1. 내 정보에 메세지를 저장하는 레퍼런스\r\n        chatRef = firebase.collection(\"employeeList\")\r\n            .document(G.employeeAccount?.id.toString())\r\n            .collection(\"chatting\")\r\n            .document(GU.otherAccount?.id.toString()) //상대방ID를 저장한다. 그래야 나중에 찾을수있다.\r\n            .collection(\"message\")//메세지에 내용을 등록한다. 밑에 도큐먼트 부분을 써줘야한다.\r\n\r\n        Log.i(\"ahn777\",G.employeeAccount?.id.toString())\r\n        Log.i(\"ahn777\",GU.otherAccount?.id.toString())\r\n\r\n        //2. 메세지에 필드를 넣는다(안그러면 내용물이 없다 착각함._\r\n        chatRef2 = firebase.collection(\"employeeList\")\r\n            .document(G.employeeAccount?.id.toString())\r\n            .collection(\"chatting\")\r\n            .document(GU.otherAccount?.id.toString())\r\n\r\n        //3. 상대방 정보에 메세지 저장하는 참레퍼런스\r\n        otherChatRef3 = firebase.collection(\"employeeList\")\r\n            .document(GU.otherAccount?.id.toString())\r\n            .collection(\"chatting\")\r\n            .document(G.employeeAccount?.id.toString())\r\n            .collection(\"message\")//상대방에게도 똑같이 저장한다. 밑에 도큐먼트 부분을 써줘야한다.\r\n\r\n        //4. 메세지에 필드를 넣는다(안그러면 내용물이 없다 착각함._\r\n        otherChatRef4 = firebase.collection(\"employeeList\")\r\n            .document(GU.otherAccount?.id.toString())\r\n            .collection(\"chatting\")\r\n            .document(G.employeeAccount?.id.toString())\r\n        //상대방 이름이 있어야 채팅방 이름에 넣을수있다.\r\n    }\r\n\r\n    //함수 1. 기존에 갖고있던 데이터 가져오기\r\n    fun getChattingData(){\r\n        //컬렉션에있는 내용을 가져오자\r\n        chatRef.addSnapshotListener(object : EventListener<QuerySnapshot>{\r\n            override fun onEvent(value: QuerySnapshot?, error: FirebaseFirestoreException?) {\r\n                //변경된 도큐먼트만 찾아달라고 요청하자\r\n                val documentChanges : MutableList<DocumentChange> = value!!.documentChanges\r\n\r\n                //처음시작할때! 기존에 채팅메세지가 10개있다고 한다면 10번 바뀐게 아니라는걸 말해줘야한다.\r\n                //for each문 , java보다 더 이해하기 쉽다.\r\n                for(documentChange in documentChanges){\r\n\r\n                    //변경된 문서내역 중에서 데이터를 촬영한 SnapShot 얻어오기\r\n                    var snapshot : DocumentSnapshot = documentChange.document\r\n\r\n                    //도큐먼트에 있는 필드값 가져오기\r\n\r\n                    //이제 Document에 있는 필드값 가져오기, 여기 조금 이상함\r\n                    var msg : MutableMap<String, Any>? = snapshot.data\r\n\r\n                    var name : String = msg?.get(\"name\").toString()\r\n                    var othername : String = msg?.get(\"othername\").toString()\r\n\r\n                    var otherId : String = msg?.get(\"otherId\").toString()\r\n                    var id : String = msg?.get(\"id\").toString()\r\n\r\n                    var message : String = msg?.get(\"message\").toString()\r\n                    var time : String = msg?.get(\"time\").toString()\r\n\r\n                    var profileUrl : String = msg?.get(\"imgUrl\").toString()\r\n                    var otherprofileUrl : String = msg?.get(\"otherprofileUrl\").toString()\r\n\r\n                    //var my : String = msg?.get(\"my\").toString()\r\n                    //var other : String = msg?.get(\"other\").toString()\r\n\r\n                    Log.i(\"ahn4747\",otherId.toString())\r\n                    Log.i(\"ahn4747\",othername.toString())\r\n\r\n\r\n                    var msg2 : MessageItem = MessageItem(name,id,message,profileUrl,time, othername,otherprofileUrl,otherId)\r\n                    Log.i(\"test1111\",msg2.toString())\r\n\r\n                    //읽어온메세지를 리스트에 추가\r\n                    messageItems.add(msg2)\r\n\r\n                    //데이터 체인지 할때마다 부르자\r\n                    msgadapter.notifyItemInserted(messageItems.size-1)\r\n\r\n                    //리사이클러뷰의 스크롤을 아래로 위치시키자.\r\n                    binding.recyclerChatting.scrollToPosition(messageItems.size-1)\r\n\r\n                }//for문 완료\r\n                //Toast.makeText(this@ChattingActivity, \"\" + messageItems.size, Toast.LENGTH_SHORT).show()\r\n                Log.i(\"size\",messageItems.size.toString())\r\n            }\r\n        })//addSnapshotListener\r\n    }\r\n\r\n    //함수 2. 샌드버튼 누를때 실행되는 함수\r\n    fun clickSend(){\r\n\r\n\r\n        //firebase에 저장할 나의 정보들\r\n        var name : String = G.employeeAccount?.name.toString()\r\n        var id : String = G.employeeAccount?.id.toString()\r\n        var mymessage : String = binding.et.text.toString()\r\n        var myimgUrl : String = G.employeeAccount?.imgProfile.toString()\r\n        var othername : String = GU.otherAccount?.name.toString()\r\n        var otherprofile : String = GU.otherAccount?.imgProfile.toString()\r\n        var otherid : String = GU.otherAccount?.id.toString()\r\n\r\n        //채팅방에 들어갈 시간 정보 만들기\r\n        var calendar : Calendar = Calendar.getInstance()\r\n        var time : String = \"${calendar.get(Calendar.HOUR_OF_DAY)}:${calendar.get(Calendar.MINUTE)}\"\r\n\r\n        //참조위치명이 중복되지 않도록 날짜를 이용\r\n        val sdf = SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\")\r\n        val today = sdf.format(Date()).toString()\r\n        Log.i(\"dateformat\",today.toString())\r\n\r\n        //필드값들을 HashMap에 만들지말고 객체로 만들어서 넣어버리자. MessageItem을 만들자\r\n        var messageItem1 : MessageItem = MessageItem(name,id, mymessage,myimgUrl,today,othername,otherprofile,otherid)\r\n        var messageItem2 : MessageItem = MessageItem(name,id, mymessage,myimgUrl,today,name,myimgUrl,id)\r\n\r\n\r\n        //(var name : String, var id : String, var message : String, var imgUrl : String, var time : String, var othername : String, var otherprofileUrl : String)\r\n\r\n        var myitem : MyItem = MyItem(GU.otherAccount?.name.toString())\r\n        var otheritem : MyItem = MyItem(G.employeeAccount?.name.toString())\r\n\r\n\r\n        chatRef.document(today).set(messageItem1) //내 메세지\r\n        chatRef2.set(myitem) //info에 상대방 이름 넣기\r\n\r\n        otherChatRef3.document(today).set(messageItem2) //상대방 메세지\r\n        otherChatRef4.set(otheritem)\r\n\r\n        binding.et.setText(\"\")\r\n\r\n        //소프트 키보드 내리기\r\n        var inputManager : InputMethodManager = this.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager\r\n        inputManager.hideSoftInputFromWindow(this.currentFocus?.windowToken, InputMethodManager.HIDE_NOT_ALWAYS)\r\n\r\n    }\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/athena/projectgroupwareapp/main/tab2/chatting/ChattingActivity.kt b/app/src/main/java/com/athena/projectgroupwareapp/main/tab2/chatting/ChattingActivity.kt
--- a/app/src/main/java/com/athena/projectgroupwareapp/main/tab2/chatting/ChattingActivity.kt	
+++ b/app/src/main/java/com/athena/projectgroupwareapp/main/tab2/chatting/ChattingActivity.kt	
@@ -220,7 +220,4 @@
         inputManager.hideSoftInputFromWindow(this.currentFocus?.windowToken, InputMethodManager.HIDE_NOT_ALWAYS)
 
     }
-
-
-
 }
\ No newline at end of file
