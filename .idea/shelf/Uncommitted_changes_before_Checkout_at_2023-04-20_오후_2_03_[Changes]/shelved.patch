Index: app/src/main/java/com/athena/projectgroupwareapp/drawer/attendance/AttendanceActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.athena.projectgroupwareapp.drawer.attendance\r\n\r\nimport android.Manifest\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.location.Location\r\nimport android.location.LocationManager\r\nimport android.os.Bundle\r\nimport android.os.Looper\r\nimport android.util.Log\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\nimport androidx.activity.result.ActivityResultCallback\r\nimport androidx.activity.result.ActivityResultLauncher\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.app.ActivityCompat\r\nimport com.athena.projectgroupwareapp.databinding.ActivityAttendanceBinding\r\nimport com.athena.projectgroupwareapp.drawer.attendance.recycler.AttendanceItem\r\nimport com.athena.projectgroupwareapp.login.G\r\nimport com.athena.projectgroupwareapp.main.tab2.chatting.MyItem\r\nimport com.google.android.gms.location.FusedLocationProviderClient\r\nimport com.google.android.gms.location.LocationCallback\r\nimport com.google.android.gms.location.LocationResult\r\nimport com.google.android.gms.location.LocationServices\r\nimport com.google.android.gms.location.Priority\r\nimport com.google.firebase.firestore.CollectionReference\r\nimport com.google.firebase.firestore.DocumentReference\r\nimport com.google.firebase.firestore.FirebaseFirestore\r\nimport com.kakao.util.maps.helper.Utility\r\nimport net.daum.mf.map.api.MapPOIItem\r\nimport net.daum.mf.map.api.MapPoint\r\nimport net.daum.mf.map.api.MapView\r\nimport net.daum.mf.map.api.MapView.POIItemEventListener\r\nimport java.text.SimpleDateFormat\r\nimport java.util.Calendar\r\nimport java.util.Date\r\n\r\n\r\nclass AttendanceActivity : AppCompatActivity() {\r\n    //파이어베이스에 데이터를 추가하자\r\n    lateinit var firebase : FirebaseFirestore\r\n    lateinit var chatRef : CollectionReference //컬렉션 참조(→)하는 변수\r\n    lateinit var chatRef2 : DocumentReference //컬렉션 참조(→)하는 변수\r\n\r\n\r\n    //카카오 맵을 추가하자\r\n    //카카오는 그래들 라이브러리가 아니라서 다른 사이트들과 다르다.\r\n\r\n    lateinit var binding : ActivityAttendanceBinding\r\n    var myLocation : Location?= null //내 위치를 못 찾아 올수도 있으니까 null로 해준다\r\n    //[ Google Fused Location API 사용 : play-services-location ]\r\n    //위치는 아주 위험하다 퍼미션 (동적 퍼미션)\r\n    val providerClient : FusedLocationProviderClient by lazy { LocationServices.getFusedLocationProviderClient(this) } //사용자측에서 제공하는 위치\r\n    //멤버변수에서는 context를 바로 쓰지 못한다. myLocation에 내 위치를 준다.\r\n\r\n\r\n    val mapView : MapView by lazy { MapView(this) } //맵뷰객체를 나중에 생성할것이다\r\n\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = com.athena.projectgroupwareapp.databinding.ActivityAttendanceBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n\r\n        //시작하면 내 위치 정보제공에 대한 동적 퍼미션 시작\r\n        if(checkSelfPermission(Manifest.permission.ACCESS_FINE_LOCATION)==PackageManager.PERMISSION_DENIED){\r\n            //거부되었으니 퍼미션을 받아오자! 퍼미션 받아오는 객체 준비.\r\n         permissionLauncher.launch(Manifest.permission.ACCESS_FINE_LOCATION)\r\n        }else{\r\n            requstMyLocations()\r\n        }\r\n\r\n        //사원이 회사 근처에 있다면 출퇴근 버튼을 누를수있게하자.\r\n        //일단 내 위치 찾아오기!\r\n        var keyHash : String = Utility.getKeyHash(this)\r\n        Log.i(\"keyhash\",keyHash)\r\n\r\n\r\n\r\n        //MapView 객체 생성 및 ViewGroup에 붙이기\r\n        val containerMapview : ViewGroup? = null\r\n        containerMapview?.addView(mapView)\r\n\r\n\r\n        myLocation()\r\n\r\n\r\n        attendance() //출퇴근버튼 및 내역 눌렀을때 발동하는 메소드\r\n\r\n    }//onCreate\r\n\r\n\r\n\r\n    //현재 사용자 위치추적\r\n    fun myLocation(){\r\n        binding.containerMapview.currentLocationTrackingMode =\r\n            MapView.CurrentLocationTrackingMode.TrackingModeOnWithHeading\r\n\r\n        val locationManager : LocationManager = getSystemService(Context.LOCATION_SERVICE) as LocationManager\r\n        val request : com.google.android.gms.location.LocationRequest = com.google.android.gms.location.LocationRequest.Builder(Priority.PRIORITY_HIGH_ACCURACY,1000).build()\r\n        //위치정보는 얘가 가져옴 , 외우지말라고\r\n        //PRIORITY_HIGH_ACCURACY  : GPS로 우선 적용해주세요\r\n\r\n        //실시간 위치정보 갱신 요청 - 이 정보는 위치정보가 있을때만 쓸수있다. 동적허가 받앗는지 실행문이 써야한다. -> 그걸 onCreate메소드에서 썼으니까 이 지역에서는 못본다.\r\n        //그걸 명시해줘야했다. addpermissioncheck를 자동으로 실행해줘야한다\r\n        //providerClient.requestLocationUpdates(request, locationCallback, Looper.getMainLooper())\r\n        if (ActivityCompat.checkSelfPermission(\r\n                this,\r\n                Manifest.permission.ACCESS_FINE_LOCATION\r\n            ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(\r\n                this,\r\n                Manifest.permission.ACCESS_COARSE_LOCATION\r\n            ) != PackageManager.PERMISSION_GRANTED\r\n        ) {\r\n            // TODO: Consider calling\r\n            //    ActivityCompat#requestPermissions\r\n            // here to request the missing permissions, and then overriding\r\n            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\r\n            //                                          int[] grantResults)\r\n            // to handle the case where the user grants the permission. See the documentation\r\n            // for ActivityCompat#requestPermissions for more details.\r\n            return\r\n        }\r\n        providerClient.requestLocationUpdates(request, locationCallback2, Looper.getMainLooper())\r\n\r\n\r\n    }\r\n\r\n    //위치검색결과 콜백객체\r\n    private val locationCallback2 : LocationCallback= object : LocationCallback(){\r\n        override fun onLocationResult(p0: LocationResult) {\r\n            super.onLocationResult(p0)\r\n            myLocation = p0.lastLocation\r\n            //정보 얻어왔으니까 실시간 업데이트 종료\r\n            providerClient.removeLocationUpdates(this) //this는 메인이 아니다. locationCallback2이다\r\n\r\n        }\r\n    }\r\n\r\n\r\n    //퍼미션 받아오는 객체이다.\r\n    val permissionLauncher : ActivityResultLauncher<String> = registerForActivityResult(ActivityResultContracts.RequestPermission(),object :ActivityResultCallback<Boolean>{\r\n        override fun onActivityResult(result: Boolean?) {\r\n            if(result!!) requstMyLocations() //내위치 찾아오는 작업메소드, resulr!!는 결과가 true일때이다.\r\n            else Toast.makeText(this@AttendanceActivity, \"위치찾기를 허용해주세요.\", Toast.LENGTH_SHORT).show()\r\n        }\r\n    })\r\n\r\n    fun requstMyLocations(){\r\n        //위치정보 기준을 설정하는 요청 객체\r\n        val request : com.google.android.gms.location.LocationRequest = com.google.android.gms.location.LocationRequest.Builder(\r\n            Priority.PRIORITY_HIGH_ACCURACY,100).build()\r\n        //PRIORITY_HIGH_ACCURACY  : GPS로 우선 적용해주세요\r\n\r\n        //실시간 위치정보 갱신 요청 - 이정보는 위치정보가 있을때만 쓸수있다. 동적 허가 받았는지 실행문 써야한다.-> 그걸 onCreate메소드에서 썼으니까 이 지역에서는 못본다.\r\n       //그걸 명시해줘야했다. addpermissioncheck를 자동으로 실행해줘야한다\r\n        if(ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(\r\n            this,Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED ){\r\n            return\r\n        }\r\n        providerClient.requestLocationUpdates(request,locationCallback, Looper.getMainLooper())\r\n\r\n    }\r\n\r\n    //위치검색결과 콜백객체\r\n    val locationCallback : LocationCallback = object : LocationCallback(){\r\n        override fun onLocationResult(p0: LocationResult) {\r\n            super.onLocationResult(p0)\r\n            myLocation = p0.lastLocation\r\n            //정보 얻어왔으니까 실시간 업데이트 종료\r\n            providerClient.removeLocationUpdates(this) //this는 메인이 아니다. locationCallback이다\r\n        }\r\n\r\n    }\r\n\r\n\r\n    //출퇴근 및 내역 눌렀을때 발동하는 메소드\r\n    fun attendance(){\r\n        firebase = FirebaseFirestore.getInstance()\r\n        chatRef = firebase.collection(\"attendance\")\r\n\r\n        chatRef2 = firebase.collection(\"attendance\")\r\n            .document(G.employeeAccount?.id.toString())// 안에 필드가없으면 도큐먼트 사이즈가 0이나온다. 하나는 넣어주자.\r\n\r\n        //1. 오늘의 날짜를 표기하자\r\n        var sdf = SimpleDateFormat(\"YYYY.MM.dd\")\r\n        var today = sdf.format(Date())\r\n        binding.today.text = today\r\n\r\n\r\n        var timeIn : String = String()\r\n        var timeOut :String = String()\r\n\r\n\r\n        //출근버튼을 누르면 출근 시간을 찍어주자.\r\n        binding.btnIn.setOnClickListener {\r\n\r\n            var calendar : Calendar = Calendar.getInstance()\r\n            var t1 : String = \"${calendar.get(Calendar.HOUR_OF_DAY)}:${calendar.get(Calendar.MINUTE)}\"\r\n            binding.timeIn.text = t1\r\n            timeIn = binding.timeIn.text.toString()\r\n\r\n            var attendanceItem : AttendanceItem = AttendanceItem(today,timeIn,timeOut)\r\n        }\r\n\r\n        //퇴근버튼을 누르면 퇴근 시간을 찍어주자.\r\n        binding.btnOut.setOnClickListener {\r\n\r\n            var calendar : Calendar = Calendar.getInstance()\r\n            var t2 : String = \"${calendar.get(Calendar.HOUR_OF_DAY)}:${calendar.get(Calendar.MINUTE)}\"\r\n            binding.timeOut.text = t2\r\n            timeOut = binding.timeOut.text.toString()\r\n\r\n            var attendanceItem : AttendanceItem = AttendanceItem(today,timeIn,timeOut)\r\n            chatRef.document(G.employeeAccount?.id.toString()).collection(\"attendance\").document(today.toString()).set(attendanceItem)\r\n\r\n            var myitem : MyItem = MyItem(G.employeeAccount?.name.toString())\r\n            chatRef2.set(myitem)\r\n        }\r\n\r\n        binding.myattendance.setOnClickListener{\r\n            var intent : Intent = Intent(this,AttendanceListActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n}//onCreate\r\n\r\n\r\n
===================================================================
diff --git a/app/src/main/java/com/athena/projectgroupwareapp/drawer/attendance/AttendanceActivity.kt b/app/src/main/java/com/athena/projectgroupwareapp/drawer/attendance/AttendanceActivity.kt
--- a/app/src/main/java/com/athena/projectgroupwareapp/drawer/attendance/AttendanceActivity.kt	
+++ b/app/src/main/java/com/athena/projectgroupwareapp/drawer/attendance/AttendanceActivity.kt	
@@ -101,12 +101,12 @@
 
         val locationManager : LocationManager = getSystemService(Context.LOCATION_SERVICE) as LocationManager
         val request : com.google.android.gms.location.LocationRequest = com.google.android.gms.location.LocationRequest.Builder(Priority.PRIORITY_HIGH_ACCURACY,1000).build()
-        //위치정보는 얘가 가져옴 , 외우지말라고
-        //PRIORITY_HIGH_ACCURACY  : GPS로 우선 적용해주세요
+        //PRIORITY_HIGH_ACCURACY  : GPS로 우선 적용
 
         //실시간 위치정보 갱신 요청 - 이 정보는 위치정보가 있을때만 쓸수있다. 동적허가 받앗는지 실행문이 써야한다. -> 그걸 onCreate메소드에서 썼으니까 이 지역에서는 못본다.
         //그걸 명시해줘야했다. addpermissioncheck를 자동으로 실행해줘야한다
         //providerClient.requestLocationUpdates(request, locationCallback, Looper.getMainLooper())
+        //이건 내가 적는게아니라 빨간불뜨면서 자동으로 써지는 메소드
         if (ActivityCompat.checkSelfPermission(
                 this,
                 Manifest.permission.ACCESS_FINE_LOCATION
Index: app/src/main/java/com/athena/projectgroupwareapp/main/tab2/recycler/MessageListItem.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.athena.projectgroupwareapp.main.tab2.recycler\r\n\r\n//리스트모양으로 만든 리사이클러뷰\r\ndata class MessageListItem constructor(var name : String, var message : String, var date : String,var id : String,  var num : String, var imgID : String, var otherId : String){\r\n}
===================================================================
diff --git a/app/src/main/java/com/athena/projectgroupwareapp/main/tab2/recycler/MessageListItem.kt b/app/src/main/java/com/athena/projectgroupwareapp/main/tab2/recycler/MessageListItem.kt
--- a/app/src/main/java/com/athena/projectgroupwareapp/main/tab2/recycler/MessageListItem.kt	
+++ b/app/src/main/java/com/athena/projectgroupwareapp/main/tab2/recycler/MessageListItem.kt	
@@ -1,5 +1,12 @@
 package com.athena.projectgroupwareapp.main.tab2.recycler
 
 //리스트모양으로 만든 리사이클러뷰
-data class MessageListItem constructor(var name : String, var message : String, var date : String,var id : String,  var num : String, var imgID : String, var otherId : String){
+data class MessageListItem constructor(
+    var name : String,
+    var message : String,
+    var date : String,
+    var id : String,
+    var num : String,
+    var imgID : String,
+    var otherId : String){
 }
\ No newline at end of file
Index: app/src/main/java/com/athena/projectgroupwareapp/main/tab2/chatting/ChattingActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.athena.projectgroupwareapp.main.tab2.chatting\r\n\r\nimport android.content.Context\r\nimport android.hardware.camera2.CaptureResult\r\nimport android.icu.number.IntegerWidth\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.WindowManager\r\nimport android.view.inputmethod.InputMethodManager\r\nimport android.widget.Adapter\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AlertDialog\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.view.get\r\nimport com.athena.projectgroupwareapp.databinding.ActivityChattingBinding\r\nimport com.athena.projectgroupwareapp.login.EmployeeAccount\r\nimport com.athena.projectgroupwareapp.login.G\r\nimport com.google.firebase.firestore.CollectionReference\r\nimport com.google.firebase.firestore.DocumentChange\r\nimport com.google.firebase.firestore.DocumentReference\r\nimport com.google.firebase.firestore.DocumentSnapshot\r\nimport com.google.firebase.firestore.EventListener\r\nimport com.google.firebase.firestore.FirebaseFirestore\r\nimport com.google.firebase.firestore.FirebaseFirestoreException\r\nimport com.google.firebase.firestore.QuerySnapshot\r\nimport java.text.SimpleDateFormat\r\nimport java.util.Calendar\r\nimport java.util.Date\r\nimport java.util.Objects\r\n\r\n\r\n//파이어베이스에 저장되는 document는 상대방이름이다.\r\n//말 건 사람은 필드에서 볼수있다.\r\nclass ChattingActivity : AppCompatActivity() {\r\n    lateinit var binding : ActivityChattingBinding\r\n    lateinit var firebase : FirebaseFirestore //파이어스토어 : 많이 쓸 예정이니까 미리 프로퍼티를 설정하자\r\n\r\n    lateinit var chatRef : CollectionReference //컬렉션 참조(→)하는 변수\r\n    lateinit var chatRef2 : DocumentReference //컬렉션 참조(→)하는 변수\r\n    //lateinit var chatRef3 : CollectionReference //컬렉션 참조(→)하는 변수\r\n\r\n    lateinit var otherChatRef3 : CollectionReference //컬렉션 참조(→)하는 변수\r\n    lateinit var otherChatRef4 : DocumentReference //컬렉션 참조(→)하는 변수\r\n    //lateinit var otherChatRef6 : CollectionReference //컬렉션 참조(→)하는 변수\r\n\r\n//    var otherId : String = GU.otherAccount?.id.toString()//상대방 사원번호와와\r\n//    var myId : String = G.employeeAccount?.id.toString()//내 사원번호를 더해서 collection을 만들자\r\n//    var collectionName : Int? = otherId.toInt()+myId.toInt()\r\n\r\n    var chattingRoom : String = GU.otherAccount?.name.toString() //대화방이름, 다른사람 이름이다.\r\n\r\n    //채팅방에 리사이클러뷰를 띄워보자\r\n    lateinit var msgadapter : MessageAdapter\r\n    var messageItems : MutableList<MessageItem> = mutableListOf()\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityChattingBinding.inflate(layoutInflater)\r\n\r\n        //캡쳐 불가하도록 만들자\r\n        getWindow().addFlags(WindowManager.LayoutParams.FLAG_SECURE)\r\n        setContentView(binding.root)\r\n\r\n        //채팅방 이름은 상대방 이름으로 표시하자\r\n        binding.toolbarChat.setTitle(chattingRoom)\r\n\r\n\r\n        //아답터 띄우기\r\n        msgadapter = MessageAdapter(this,messageItems)\r\n        binding.recyclerChatting.adapter = msgadapter\r\n\r\n        //Log.i(\"recycler\",msgadapter.toString())\r\n\r\n        //chatting이라는 컬렉션을 만들자 - 회원번호를 더한 값으로 만들자.\r\n        firebase = FirebaseFirestore.getInstance()\r\n        reference() //레퍼런스 참조변수\r\n\r\n        //기존데이터가져오기\r\n        getChattingData()\r\n\r\n        //내가 보낸 채팅 메세지를 저장한다.\r\n        binding.btn.setOnClickListener{view->clickSend()}\r\n\r\n    }//onCreate\r\n\r\n\r\n    fun reference(){\r\n        //1. 내 정보에 메세지를 저장하는 레퍼런스\r\n        chatRef = firebase.collection(\"employeeList\")\r\n            .document(G.employeeAccount?.id.toString())\r\n            .collection(\"chatting\")\r\n            .document(GU.otherAccount?.id.toString()) //상대방ID를 저장한다. 그래야 나중에 찾을수있다.\r\n            .collection(\"message\")//메세지에 내용을 등록한다. 밑에 도큐먼트 부분을 써줘야한다.\r\n\r\n        Log.i(\"ahn777\",G.employeeAccount?.id.toString())\r\n        Log.i(\"ahn777\",GU.otherAccount?.id.toString())\r\n\r\n        //2. 메세지에 필드를 넣는다(안그러면 내용물이 없다 착각함._\r\n        chatRef2 = firebase.collection(\"employeeList\")\r\n            .document(G.employeeAccount?.id.toString())\r\n            .collection(\"chatting\")\r\n            .document(GU.otherAccount?.id.toString())\r\n\r\n        //3. 상대방 정보에 메세지 저장하는 참레퍼런스\r\n        otherChatRef3 = firebase.collection(\"employeeList\")\r\n            .document(GU.otherAccount?.id.toString())\r\n            .collection(\"chatting\")\r\n            .document(G.employeeAccount?.id.toString())\r\n            .collection(\"message\")//상대방에게도 똑같이 저장한다. 밑에 도큐먼트 부분을 써줘야한다.\r\n\r\n        //4. 메세지에 필드를 넣는다(안그러면 내용물이 없다 착각함._\r\n        otherChatRef4 = firebase.collection(\"employeeList\")\r\n            .document(GU.otherAccount?.id.toString())\r\n            .collection(\"chatting\")\r\n            .document(G.employeeAccount?.id.toString())\r\n        //상대방 이름이 있어야 채팅방 이름에 넣을수있다.\r\n    }\r\n\r\n    //함수 1. 기존에 갖고있던 데이터 가져오기\r\n    fun getChattingData(){\r\n        //컬렉션에있는 내용을 가져오자\r\n        chatRef.addSnapshotListener(object : EventListener<QuerySnapshot>{\r\n            override fun onEvent(value: QuerySnapshot?, error: FirebaseFirestoreException?) {\r\n                //변경된 도큐먼트만 찾아달라고 요청하자\r\n                val documentChanges : MutableList<DocumentChange> = value!!.documentChanges\r\n\r\n                //처음시작할때! 기존에 채팅메세지가 10개있다고 한다면 10번 바뀐게 아니라는걸 말해줘야한다.\r\n                //for each문 , java보다 더 이해하기 쉽다.\r\n                for(documentChange in documentChanges){\r\n\r\n                    //변경된 문서내역 중에서 데이터를 촬영한 SnapShot 얻어오기\r\n                    var snapshot : DocumentSnapshot = documentChange.document\r\n\r\n                    //도큐먼트에 있는 필드값 가져오기\r\n\r\n                    //이제 Document에 있는 필드값 가져오기, 여기 조금 이상함\r\n                    var msg : MutableMap<String, Any>? = snapshot.data\r\n\r\n                    var name : String = msg?.get(\"name\").toString()\r\n                    var othername : String = msg?.get(\"othername\").toString()\r\n\r\n                    var otherId : String = msg?.get(\"otherId\").toString()\r\n                    var id : String = msg?.get(\"id\").toString()\r\n\r\n                    var message : String = msg?.get(\"message\").toString()\r\n                    var time : String = msg?.get(\"time\").toString()\r\n\r\n                    var profileUrl : String = msg?.get(\"imgUrl\").toString()\r\n                    var otherprofileUrl : String = msg?.get(\"otherprofileUrl\").toString()\r\n\r\n                    //var my : String = msg?.get(\"my\").toString()\r\n                    //var other : String = msg?.get(\"other\").toString()\r\n\r\n                    Log.i(\"ahn4747\",otherId.toString())\r\n                    Log.i(\"ahn4747\",othername.toString())\r\n\r\n\r\n                    var msg2 : MessageItem = MessageItem(name,id,message,profileUrl,time, othername,otherprofileUrl,otherId)\r\n                    Log.i(\"test1111\",msg2.toString())\r\n\r\n                    //읽어온메세지를 리스트에 추가\r\n                    messageItems.add(msg2)\r\n\r\n                    //데이터 체인지 할때마다 부르자\r\n                    msgadapter.notifyItemInserted(messageItems.size-1)\r\n\r\n                    //리사이클러뷰의 스크롤을 아래로 위치시키자.\r\n                    binding.recyclerChatting.scrollToPosition(messageItems.size-1)\r\n\r\n                }//for문 완료\r\n                //Toast.makeText(this@ChattingActivity, \"\" + messageItems.size, Toast.LENGTH_SHORT).show()\r\n                Log.i(\"size\",messageItems.size.toString())\r\n            }\r\n        })//addSnapshotListener\r\n    }\r\n\r\n    //함수 2. 샌드버튼 누를때 실행되는 함수\r\n    fun clickSend(){\r\n\r\n\r\n        //firebase에 저장할 나의 정보들\r\n        var name : String = G.employeeAccount?.name.toString()\r\n        var id : String = G.employeeAccount?.id.toString()\r\n        var mymessage : String = binding.et.text.toString()\r\n        var myimgUrl : String = G.employeeAccount?.imgProfile.toString()\r\n        var othername : String = GU.otherAccount?.name.toString()\r\n        var otherprofile : String = GU.otherAccount?.imgProfile.toString()\r\n        var otherid : String = GU.otherAccount?.id.toString()\r\n\r\n        //채팅방에 들어갈 시간 정보 만들기\r\n        var calendar : Calendar = Calendar.getInstance()\r\n        var time : String = \"${calendar.get(Calendar.HOUR_OF_DAY)}:${calendar.get(Calendar.MINUTE)}\"\r\n\r\n        //참조위치명이 중복되지 않도록 날짜를 이용\r\n        val sdf = SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\")\r\n        val today = sdf.format(Date()).toString()\r\n        Log.i(\"dateformat\",today.toString())\r\n\r\n        //필드값들을 HashMap에 만들지말고 객체로 만들어서 넣어버리자. MessageItem을 만들자\r\n        var messageItem1 : MessageItem = MessageItem(name,id, mymessage,myimgUrl,today,othername,otherprofile,otherid)\r\n        var messageItem2 : MessageItem = MessageItem(name,id, mymessage,myimgUrl,today,name,myimgUrl,id)\r\n\r\n\r\n        //(var name : String, var id : String, var message : String, var imgUrl : String, var time : String, var othername : String, var otherprofileUrl : String)\r\n\r\n        var myitem : MyItem = MyItem(GU.otherAccount?.name.toString())\r\n        var otheritem : MyItem = MyItem(G.employeeAccount?.name.toString())\r\n\r\n\r\n        chatRef.document(today).set(messageItem1) //내 메세지\r\n        chatRef2.set(myitem) //info에 상대방 이름 넣기\r\n\r\n        otherChatRef3.document(today).set(messageItem2) //상대방 메세지\r\n        otherChatRef4.set(otheritem)\r\n\r\n        binding.et.setText(\"\")\r\n\r\n        //소프트 키보드 내리기\r\n        var inputManager : InputMethodManager = this.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager\r\n        inputManager.hideSoftInputFromWindow(this.currentFocus?.windowToken, InputMethodManager.HIDE_NOT_ALWAYS)\r\n\r\n    }\r\n\r\n\r\n\r\n}
===================================================================
diff --git a/app/src/main/java/com/athena/projectgroupwareapp/main/tab2/chatting/ChattingActivity.kt b/app/src/main/java/com/athena/projectgroupwareapp/main/tab2/chatting/ChattingActivity.kt
--- a/app/src/main/java/com/athena/projectgroupwareapp/main/tab2/chatting/ChattingActivity.kt	
+++ b/app/src/main/java/com/athena/projectgroupwareapp/main/tab2/chatting/ChattingActivity.kt	
@@ -188,8 +188,11 @@
         var otherid : String = GU.otherAccount?.id.toString()
 
         //채팅방에 들어갈 시간 정보 만들기
-        var calendar : Calendar = Calendar.getInstance()
-        var time : String = "${calendar.get(Calendar.HOUR_OF_DAY)}:${calendar.get(Calendar.MINUTE)}"
+//        var calendar : Calendar = Calendar.getInstance()
+//        var time : String = "${calendar.get(Calendar.HOUR_OF_DAY)}:${calendar.get(Calendar.MINUTE)}"
+
+        val chatsdf = SimpleDateFormat("aa HH:mm")
+        val chattoday = chatsdf.format(Date()).toString()
 
         //참조위치명이 중복되지 않도록 날짜를 이용
         val sdf = SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
@@ -197,9 +200,8 @@
         Log.i("dateformat",today.toString())
 
         //필드값들을 HashMap에 만들지말고 객체로 만들어서 넣어버리자. MessageItem을 만들자
-        var messageItem1 : MessageItem = MessageItem(name,id, mymessage,myimgUrl,today,othername,otherprofile,otherid)
-        var messageItem2 : MessageItem = MessageItem(name,id, mymessage,myimgUrl,today,name,myimgUrl,id)
-
+        var messageItem1 : MessageItem = MessageItem(name,id, mymessage,myimgUrl,chattoday,othername,otherprofile,otherid)
+        var messageItem2 : MessageItem = MessageItem(name,id, mymessage,myimgUrl,chattoday,name,myimgUrl,id)
 
         //(var name : String, var id : String, var message : String, var imgUrl : String, var time : String, var othername : String, var otherprofileUrl : String)
 
